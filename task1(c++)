#include <iostream>
#include <vector>

using namespace std;

void linearRegression(const vector<double>& x, const vector<double>& y, double& a, double& b) {
    int n = x.size();
    double sumX = 0, sumY = 0, sumXY = 0, sumXX = 0;

    for (int i = 0; i < n; ++i) {
        sumX += x[i];
        sumY += y[i];
        sumXY += x[i] * y[i];
        sumXX += x[i] * x[i];
    }

    a = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
    b = (sumY * sumXX - sumX * sumXY) / (n * sumXX - sumX * sumX);
}

void quadraticRegression(const vector<double>& x, const vector<double>& y, double& a, double& b, double& c) {
    int n = x.size();
    double sumX = 0, sumY = 0, sumXY = 0, sumXX = 0, sumXXX = 0, sumXXXX = 0, sumXXY = 0;

    for (int i = 0; i < n; ++i) {
        sumX += x[i];
        sumY += y[i];
        sumXY += x[i] * y[i];
        sumXX += x[i] * x[i];
        sumXXX += x[i] * x[i] * x[i];
        sumXXXX += x[i] * x[i] * x[i] * x[i];
        sumXXY += x[i] * x[i] * y[i];
    }

    double denom = n * (sumXX * sumXXXX - sumXXX * sumXXX) - sumX * (sumX * sumXXXX - sumXX * sumXXX) + sumXX * (sumX * sumXXX - sumXX * sumXX);

    a = (n * (sumXX * sumXXY - sumXXX * sumXY) - sumX * (sumX * sumXXY - sumXX * sumXY) + sumXX * (sumX * sumXY - sumXX * sumY)) / denom;
    b = (n * (sumXY * sumXXXX - sumXXY * sumXXX) - sumY * (sumX * sumXXXX - sumXX * sumXXX) + sumXX * (sumY * sumXXX - sumXXY * sumX)) / denom;
    c = (sumXX * (sumXX * sumY - sumXY * sumX) - sumX * (sumXX * sumXY - sumX * sumXXY) + sumXXX * (sumX * sumXY - sumXX * sumY)) / denom;
}

int main() {
    setlocale(LC_ALL, "Russian");
    vector<double> x = { -1.0, 0.0, 1.0, 2.0, 3.0, 4.0 };
    vector<double> y = { -0.5, 0.0, 0.5, 0.86603, 1.0, 0.86603 };

    double a1, b1; 
    double a2, b2, c2; 

    linearRegression(x, y, a1, b1);
    cout << "Линейная регрессия (первой степени): y = " << a1 << " * x + " << b1 << endl;

    quadraticRegression(x, y, a2, b2, c2);
    cout << "Квадратичная регрессия (второй степени): y = " << a2 << " * x^2 + " << b2 << " * x + " << c2 << endl;

    return 0;
}
